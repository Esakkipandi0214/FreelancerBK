generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentType {
  TO_PAY
  TO_RECEIVE
}

enum PaymentStatus {
  PENDING
  PAID
  RECEIVED
}

enum BudgetStatus {
  Planning
  InProgress
  Completed
  Cancelled
}


enum PaymentMethod {
  CASH
  UPI
  CARD
  BANK_TRANSFER
  OTHER
}


model User {
  id           String           @id @default(uuid())
  name         String?
  email        String           @unique
  phone        String?
  password     String
  isVerified   Boolean          @default(false)
  otp          String?
  otpExpiresAt DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  isActive     Boolean          @default(true)
  budgets      Budget_Details[] @relation("UserBudgets")
  payments     User_Payements[]
  Incomes      User_Income[]
  Expenses     User_Expense[]
}

model Budget_Details {
  budgetId        String         @id @default(uuid())
  budgetName      String
  userId          String
  budgetStartDate DateTime
  budgetEndDate   DateTime
  createdTime     DateTime       @default(now())
  user            User           @relation(fields: [userId], references: [id], name: "UserBudgets")
  incomes         User_Income[]
  expenses        User_Expense[]
}

model User_Income {
  incomeId       String          @id @default(ulid())
  incomeCategory String
  incomeAmount   Float
  paymentMethod   PaymentMethod  @default(OTHER)
  createdTime    DateTime        @default(now())
  budgetId       String?
  Notes               String? @db.VarChar(255)
  userId         String
  user           User            @relation(fields: [userId], references: [id])
  budget         Budget_Details? @relation(fields: [budgetId], references: [budgetId])
}

model User_Expense {
  expenseId       String          @id @default(ulid())
  expenseCategory String
  expenseAmount   Float
  Notes               String? @db.VarChar(255)
  paymentMethod   PaymentMethod    @default(OTHER)
  createdTime     DateTime        @default(now())
  budgetId        String?
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  budget          Budget_Details? @relation(fields: [budgetId], references: [budgetId])
}

model User_Payements {
  payementId          String   @id @default(ulid())
  payementCategory    String
  payementTotalAmount Float
  payementPaidAmount  Float
  paymentMethod   PaymentMethod    @default(OTHER)
  Notes               String? @db.VarChar(255)  // limits to 255 characters
  paymentType         PaymentType
  paymentStatus       PaymentStatus @default(PENDING)
  userId              String
  createdTime         DateTime @default(now())
  user                User     @relation(fields: [userId], references: [id])
}

model Budget_Planner {
  budgetPlanId        String         @id @default(uuid())
  Budget_Name      String
  Budget_Type      String
  userId          String
  Total_Budget    Float
  Spend_Budget    Float
  Remainnig_Budget    Float
  Plan_Status     BudgetStatus @default(Planning)
  budgetStartDate DateTime
  budgetEndDate   DateTime
  createdTime     DateTime       @default(now())
  // ✅ Relation to Spend Tracker
  expenses            Budget_Planner_SpendTracker[] @relation("BudgetToExpenses")
}

model Budget_Planner_SpendTracker {
  SpendTrackerId        String         @id @default(uuid())
  expense_Description      String
  expense_Category      String
  budgetPlanId          String
  expense_amount    Float
  pay_time DateTime
  createdTime     DateTime       @default(now())
  isExpense_Paid Boolean @default(false)
    // ✅ Relation back to Budget
  budgetPlan          Budget_Planner @relation("BudgetToExpenses", fields: [budgetPlanId], references: [budgetPlanId])

}